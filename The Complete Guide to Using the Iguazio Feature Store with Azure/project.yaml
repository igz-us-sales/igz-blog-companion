kind: project
metadata:
  name: azure-fs-demo
  created: '2021-12-06T22:15:03.022000+00:00'
spec:
  functions:
  - name: azure
    spec:
      kind: job
      metadata:
        name: azure
        tag: ''
        project: azure-fs-demo
      spec:
        command: ''
        args: []
        image: mlrun/mlrun
        env: []
        default_handler: ''
        description: ''
        build:
          functionSourceCode: 
          commands:
          - python -m pip install pip==21.2.4 azureml-core==1.33.0 azureml-train-automl-client==1.33.0
            azureml-automl-runtime==1.33.1
          code_origin: git://github.com/igz-us-sales/igz-azure-fs.git#refs/heads/master
          origin_filename: azure_automl.py
        disable_auto_mount: false
        priority_class_name: igz-workload-medium
        affinity: null
      verbose: false
  workflows: []
  artifacts: []
  source: git://github.com/igz-us-sales/igz-azure-fs.git#refs/heads/master
  subpath: ''
  origin_url: git://github.com/igz-us-sales/igz-azure-fs.git#refs/heads/master
  desired_state: online
  owner: nick
  disable_auto_mount: false
status:
  state: online
